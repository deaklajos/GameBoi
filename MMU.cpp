#include "MMU.h"

#include <fstream>
#include "Exceptions.h"

// boot ROM  from: https://gbdev.gg8.se/wiki/articles/Gameboy_Bootstrap_ROM
MMU::MMU(const uint16_t& pc) :pc{ pc },
boot_ROM{
	0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,
	0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,
	0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,
	0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,
	0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,
	0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,
	0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,
	0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,
	0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xE2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,
	0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,
	0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,
	0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
	0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
	0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3c, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x3C,
	0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20,
	0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50
}
{
	backgroundPalette.value = 0;
	gpuControl.value = 0;

	std::ifstream infile("tetris.gb");

	infile.seekg(0, std::ios::end);
	size_t length = infile.tellg();
	infile.seekg(0, std::ios::beg);

	if (length > ROM.size())
		throw std::logic_error("Banking not yet supported!");

	infile.read((char*)ROM.data(), length);
}

MMU::~MMU()
{
}

uint8_t MMU::read_8(uint16_t address) const
{
	switch (address & 0xF000)
	{
	case 0x0000:
		if (isBootROMRunning && address < 0x0100)
			return boot_ROM[address];

		return ROM[address];

	// ROM0
	case 0x1000:
	case 0x2000:
	case 0x3000:
		return ROM[address];

	// ROM1
	case 0x4000:
	case 0x5000:
	case 0x6000:
	case 0x7000:
		return ROM[address];

	case 0x8000:
	case 0x9000:
		return VRAM[address & 0x1FFF];

	case 0xA000:
	case 0xB000:
		return ERAM[address & 0x1FFF];

	case 0xC000:
	case 0xD000:
		return WRAM[address & 0x1FFF];

	// Shadow
	case 0xE000:
		return WRAM[address & 0x1FFF];

	case 0xF000:
		switch (address & 0x0F00)
		{
		// Shadow
		case 0x000: case 0x100: case 0x200: case 0x300:
		case 0x400: case 0x500: case 0x600: case 0x700:
		case 0x800: case 0x900: case 0xA00: case 0xB00:
		case 0xC00: case 0xD00:
			return WRAM[address & 0x1FFF];

		case 0xE00:
			if (address < 0xFEA0)
			{
				return OAM[address & 0x9F];
			}
			else
			{
				throw std::logic_error("hhhmm?");
				return 0;
			}

		case 0xF00:
			if (address >= 0xFF80)
			{
				return ZRAM[address & 0x7F];
			}
			else
			{
				// I/O
				switch (address)
				{
				case 0xFF40:
					return gpuControl.value;
				case 0xFF42:
					return scrollY;
				case 0xFF43:
					return scrollX;
				case 0xFF44:
					return line;
				}

				throw std::logic_error("unhandled");
				return 0;
			}
		}
	}

	throw std::logic_error("hhhmm?");
	return 0;
}

void MMU::write_8(uint16_t address, uint8_t data)
{
	switch (address & 0xF000)
	{
	// ROM0
	case 0x0000:
	case 0x1000:
	case 0x2000:
	case 0x3000:
		throw std::logic_error("hhhmm?");
		ROM[address] = data;
		return;

	// ROM1
	case 0x4000:
	case 0x5000:
	case 0x6000:
	case 0x7000:
		throw std::logic_error("hhhmm?");
		ROM[address] = data;
		return;

	case 0x8000:
	case 0x9000:
		VRAM[address & 0x1FFF] = data;
		return;

	case 0xA000:
	case 0xB000:
		ERAM[address & 0x1FFF] = data;
		return;

	case 0xC000:
	case 0xD000:
		WRAM[address & 0x1FFF] = data;
		return;

	// Shadow
	case 0xE000:
		WRAM[address & 0x1FFF] = data;
		return;

	case 0xF000:
		switch (address & 0x0F00)
		{
		// Shadow
		case 0x000: case 0x100: case 0x200: case 0x300:
		case 0x400: case 0x500: case 0x600: case 0x700:
		case 0x800: case 0x900: case 0xA00: case 0xB00:
		case 0xC00: case 0xD00:
			WRAM[address & 0x1FFF] = data;
			return;

		case 0xE00:
			if (address < 0xFEA0)
			{
				OAM[address & 0x9F] = data;
				return;
			}
			else
			{
				throw std::logic_error("hhhmm?");
				return;
			}

		case 0xF00:
			if (address >= 0xFF80)
			{
				ZRAM[address & 0x7F] = data;
				return;
			}
			else
			{
				// I/O
				switch (address)
				{
				case 0xFF26:
					// Sound ON/OFF
					return;

				case 0xFF40:
					gpuControl.value = data;
					return;

				case 0xFF42:
					scrollY = data;
					return;

				case 0xFF43:
					scrollX = data;
					return;

				case 0xFF47:
					backgroundPalette.value = data;
					return;

				case 0xFF50:
					isBootROMRunning = false;
					return;
				}

				//throw std::logic_error("unhandled");
				return;
			}
		}
	}

	throw std::logic_error("hhhmm?");
}

uint16_t MMU::read_16(uint16_t address) const
{
	return read_8(address) | (read_8(address + 1) << 8);
}

void MMU::write_16(uint16_t address, uint16_t data)
{
	write_8(address, (uint8_t)(data & 0x00FF));
	write_8(address + 1, (uint8_t)((data & 0xFF00) >> 8));
}
